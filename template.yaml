Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where resources will be deployed.
  PublicSubnetA:
    Type: AWS::EC2::Subnet::Id
  PublicSubnetB:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnets:
    Description: Select list of private subnets for ECS tasks. They should be in same VPC and has routes between PublicSubnets.
    Type: AWS::EC2::Subnet::Id
  HostedZone:
    Type: AWS::Route53::HostedZone::Id
  Domain:
    Type: String
  RookoutToken:
    Type: String
  DataStore:
    "AllowedValues": ["true", "false"]
    "Default": "false"
    "Type": String

Conditions:
  ShouldCreateDataStore:
    !Equals [true, !Ref DataStore]

Resources:

  ECS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ecs/template.yaml

  Certificates:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: certificates/template.yaml
      Parameters:
        HostedZone:
          Ref: HostedZone
        Domain:
          Ref: Domain
### Controller Resources ###
  ControllerSG:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: controller/sg/template.yaml
      Parameters:
        VpcId:
          Ref: VpcId

  ControllerALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: controller/alb/template.yaml
      Parameters:
        PublicSubnetA:
          Ref: PublicSubnetA
        PublicSubnetB:
          Ref: PublicSubnetB
        RookoutControllerFargateServiceSecurityGroup:
          Fn::GetAtt: [ ControllerSG, Outputs.RookoutControllerFargateServiceSecurityGroup ]
        RookoutControllerFargateServiceLBSecurityGroup:
          Fn::GetAtt: [ ControllerSG, Outputs.RookoutControllerFargateServiceLBSecurityGroup ]

  ControllerIAM:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: controller/iam/template.yaml

  ControllerFargate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: controller/fargate/template.yaml
      Parameters:
        VpcId:
          Ref: VpcId
        RookoutToken:
          Ref: RookoutToken
        PrivateSubnets:
          Ref: PrivateSubnets
        RookoutCluster:
          Fn::GetAtt: [ ECS, Outputs.RookoutCluster ]
        RookoutCertificate:
          Fn::GetAtt: [ Certificates, Outputs.RookoutCertificate ]
        RookoutControllerFargateServiceSecurityGroup:
          Fn::GetAtt: [ ControllerSG, Outputs.RookoutControllerFargateServiceSecurityGroup ]
        RookoutControllerFargateServiceTaskDefTaskRole:
          Fn::GetAtt: [ ControllerIAM, Outputs.RookoutControllerFargateServiceTaskDefTaskRole ]
        RookoutControllerFargateServiceTaskDefExecutionRole:
          Fn::GetAtt: [ ControllerIAM, Outputs.RookoutControllerFargateServiceTaskDefExecutionRole ]
        RookoutControllerFargateServiceLBArn:
          Fn::GetAtt: [ ControllerALB, Outputs.RookoutControllerFargateServiceLBArn ]

#  ControllerRoute53:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      TemplateURL: controller/route53/template.yaml
#      Parameters:
#        HostedZone:
#          Ref: HostedZone
#        Domain:
#          Ref: Domain
#        RookoutControllerFargateServiceLBDNSName:
#          Fn::GetAtt: [ ControllerALB, Outputs.RookoutControllerFargateServiceLBDNSName ]
#        RookoutControllerFargateServiceLBCanonicalHostedZoneID:
#          Fn::GetAtt: [ ControllerALB, Outputs.RookoutControllerFargateServiceLBCanonicalHostedZoneID ]

### DataStore Resources ###

  DataStoreSG:
    Type: AWS::CloudFormation::Stack
    Condition: ShouldCreateDataStore
    Properties:
      TemplateURL: datastore/sg/template.yaml
      Parameters:
        VpcId:
          Ref: VpcId

  DataStoreALB:
    Type: AWS::CloudFormation::Stack
    Condition: ShouldCreateDataStore
    Properties:
      TemplateURL: datastore/alb/template.yaml
      Parameters:
        PublicSubnetA:
          Ref: PublicSubnetA
        PublicSubnetB:
          Ref: PublicSubnetB
        RookoutDataStoreFargateServiceSecurityGroup:
          Fn::GetAtt: [ DataStoreSG, Outputs.RookoutDataStoreFargateServiceSecurityGroup ]
        RookoutDataStoreFargateServiceLBSecurityGroup:
          Fn::GetAtt: [ DataStoreSG, Outputs.RookoutDataStoreFargateServiceLBSecurityGroup ]

  DataStoreIAM:
    Type: AWS::CloudFormation::Stack
    Condition: ShouldCreateDataStore
    Properties:
      TemplateURL: datastore/iam/template.yaml

  DataStoreFargate:
    Type: AWS::CloudFormation::Stack
    Condition: ShouldCreateDataStore
    Properties:
      TemplateURL: datastore/fargate/template.yaml
      Parameters:
        VpcId:
          Ref: VpcId
        RookoutToken:
          Ref: RookoutToken
        PrivateSubnets:
          Ref: PrivateSubnets
        RookoutCluster:
          Fn::GetAtt: [ ECS, Outputs.RookoutCluster ]
        RookoutCertificate:
          Fn::GetAtt: [ Certificates, Outputs.RookoutCertificate ]
        RookoutDataStoreFargateServiceSecurityGroup:
          Fn::GetAtt: [ DataStoreSG, Outputs.RookoutDataStoreFargateServiceSecurityGroup ]
        RookoutDataStoreFargateServiceTaskDefTaskRole:
          Fn::GetAtt: [ DataStoreIAM, Outputs.RookoutDataStoreFargateServiceTaskDefTaskRole ]
        RookoutDataStoreFargateServiceTaskDefExecutionRole:
          Fn::GetAtt: [ DataStoreIAM, Outputs.RookoutDataStoreFargateServiceTaskDefExecutionRole ]
        RookoutDataStoreFargateServiceLBArn:
          Fn::GetAtt: [ DataStoreALB, Outputs.RookoutDataStoreFargateServiceLBArn ]

  DataStoreRoute53:
    Type: AWS::CloudFormation::Stack
    Condition: ShouldCreateDataStore
    Properties:
      TemplateURL: datastore/route53/template.yaml
      Parameters:
        HostedZone:
          Ref: HostedZone
        Domain:
          Ref: Domain
        RookoutDataStoreFargateServiceLBDNSName:
          Fn::GetAtt: [ DataStoreALB, Outputs.RookoutDataStoreFargateServiceLBDNSName ]
        RookoutDataStoreFargateServiceLBCanonicalHostedZoneID:
          Fn::GetAtt: [ DataStoreALB, Outputs.RookoutDataStoreFargateServiceLBCanonicalHostedZoneID ]