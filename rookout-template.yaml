Parameters:
  HostedZone:
    Description: Select Public Route53 HostedZone where DNS reccord will be created.
    Type: AWS::Route53::HostedZone::Id
  Domain:
    Description: Enter your domain assosiated with HostedZone
    Type: String
  RookoutToken:
    Description: Rookout token.
    Type: String
  DataStoreDeploy:
    Description: Deploy Rookout On-Prem datastore.
    AllowedValues: ["true", "false"]
    Default: "false"
    Type: String
  DemoDeploy:
    Description: Deploy demo application.
    AllowedValues: [ "true", "false" ]
    Default: "false"
    Type: String
  ControllerCPU:
    Description: The number of cpu units used by the Controller task (1024 = 1 vCPU)
    AllowedValues: [ 1024, 2048, 4096 ]
    Default: 2048
    Type: String
  ControllerMemory:
    Description: The amount (in MiB) of memory used by the Controller task.
    Default: 4096
    Type: String
  DataStoreCPU:
    Description: The number of cpu units used by the DataStore task (1024 = 1 vCPU)
    AllowedValues: [ 1024, 2048, 4096 ]
    Default: 2048
    Type: String
  DataStoreMemory:
    Description: The amount (in MiB) of memory used by the DataStore task.
    Default: 4096
    Type: String
Conditions:
  ShouldCreateDataStore:
    !Equals [true, !Ref DataStoreDeploy]
  ShouldCreateDemo:
    !Equals [true, !Ref DemoDeploy]
Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: vpc/template.yaml
  ECS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ecs/template.yaml
  Certificates:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: certificates/template.yaml
      Parameters:
        HostedZone:
          Ref: HostedZone
        Domain:
          Ref: Domain
  Controller:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: controller/template.yaml
      Parameters:
        HostedZone:
          Ref: HostedZone
        Domain:
          Ref: Domain
        RookoutToken:
          Ref: RookoutToken
        CPU:
          Ref: ControllerCPU
        Memory:
          Ref: ControllerMemory
        VpcId:
          Fn::GetAtt: [ VPC, Outputs.VpcId ]
        PublicSubnet1:
          Fn::GetAtt: [ VPC, Outputs.PublicSubnet1 ]
        PublicSubnet2:
          Fn::GetAtt: [ VPC, Outputs.PublicSubnet2 ]
        PrivateSubnet1:
          Fn::GetAtt: [ VPC, Outputs.PrivateSubnet1 ]
        PrivateSubnet2:
          Fn::GetAtt: [ VPC, Outputs.PrivateSubnet2 ]
        RookoutCluster:
          Fn::GetAtt: [ ECS, Outputs.RookoutCluster ]
        RookoutCertificate:
          Fn::GetAtt: [ Certificates, Outputs.RookoutCertificate ]
  DataStore:
    Type: AWS::CloudFormation::Stack
    Condition: ShouldCreateDataStore
    Properties:
      TemplateURL: datastore/template.yaml
      Parameters:
        HostedZone:
          Ref: HostedZone
        Domain:
          Ref: Domain
        RookoutToken:
          Ref: RookoutToken
        CPU:
          Ref: DataStoreCPU
        Memory:
          Ref: DataStoreMemory
        VpcId:
          Fn::GetAtt: [ VPC, Outputs.VpcId ]
        PublicSubnet1:
          Fn::GetAtt: [ VPC, Outputs.PublicSubnet1 ]
        PublicSubnet2:
          Fn::GetAtt: [ VPC, Outputs.PublicSubnet2 ]
        PrivateSubnet1:
          Fn::GetAtt: [ VPC, Outputs.PrivateSubnet1 ]
        PrivateSubnet2:
          Fn::GetAtt: [ VPC, Outputs.PrivateSubnet2 ]
        RookoutCluster:
          Fn::GetAtt: [ ECS, Outputs.RookoutCluster ]
        RookoutCertificate:
          Fn::GetAtt: [ Certificates, Outputs.RookoutCertificate ]
  Demo:
    Type: AWS::CloudFormation::Stack
    Condition: ShouldCreateDemo
    Properties:
      TemplateURL: demo/template.yaml
      Parameters:
        HostedZone:
          Ref: HostedZone
        Domain:
          Ref: Domain
        RookoutToken:
          Ref: RookoutToken
        VpcId:
          Fn::GetAtt: [ VPC, Outputs.VpcId ]
        PublicSubnet1:
          Fn::GetAtt: [ VPC, Outputs.PublicSubnet1 ]
        PublicSubnet2:
          Fn::GetAtt: [ VPC, Outputs.PublicSubnet2 ]
        PrivateSubnet1:
          Fn::GetAtt: [ VPC, Outputs.PrivateSubnet1 ]
        PrivateSubnet2:
          Fn::GetAtt: [ VPC, Outputs.PrivateSubnet2 ]
        RookoutCluster:
          Fn::GetAtt: [ ECS, Outputs.RookoutCluster ]
        RookoutCertificate:
          Fn::GetAtt: [ Certificates, Outputs.RookoutCertificate ]